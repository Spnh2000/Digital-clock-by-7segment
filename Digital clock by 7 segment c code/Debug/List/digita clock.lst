
AVRASM ver. 2.1.30  E:\000\avr one\az4\Debug\List\digita clock.asm Sat Mar 12 15:15:48 2022

E:\000\avr one\az4\Debug\List\digita clock.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\000\avr one\az4\Debug\List\digita clock.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\000\avr one\az4\Debug\List\digita clock.asm(1090): warning: Register r7 already defined by the .DEF directive
E:\000\avr one\az4\Debug\List\digita clock.asm(1091): warning: Register r8 already defined by the .DEF directive
E:\000\avr one\az4\Debug\List\digita clock.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hours=R5
                 	.DEF _minutes=R4
                 	.DEF _seconds=R7
                 	.DEF _pointer=R8
                 	.DEF _pointer_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 00b8 	JMP  _timer1_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0097 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 173a
00002b 0000      	.DB  0x3A,0x17,0x0,0x0
                 
                 _0x3:
00002c 063f
00002d 4f5b
00002e 6d66
00002f 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000030 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
000031 0004      	.DW  0x04
000032 0004      	.DW  0x04
000033 0054      	.DW  __REG_VARS*2
                 
000034 000a      	.DW  0x0A
000035 0260      	.DW  _cathode_seg
000036 0058      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003f e08d      	LDI  R24,(14-2)+1
000040 e0a2      	LDI  R26,2
000041 27bb      	CLR  R27
                 __CLEAR_REG:
000042 93ed      	ST   X+,R30
000043 958a      	DEC  R24
000044 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000045 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000046 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000047 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000048 93ed      	ST   X+,R30
000049 9701      	SBIW R24,1
00004a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004b e6e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004d 9185      	LPM  R24,Z+
00004e 9195      	LPM  R25,Z+
00004f 9700      	SBIW R24,0
000050 f061      	BREQ __GLOBAL_INI_END
000051 91a5      	LPM  R26,Z+
000052 91b5      	LPM  R27,Z+
000053 9005      	LPM  R0,Z+
000054 9015      	LPM  R1,Z+
000055 01bf      	MOVW R22,R30
000056 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000057 9005      	LPM  R0,Z+
000058 920d      	ST   X+,R0
000059 9701      	SBIW R24,1
00005a f7e1      	BRNE __GLOBAL_INI_LOOP
00005b 01fb      	MOVW R30,R22
00005c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005e bfed      	OUT  SPL,R30
00005f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000060 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000061 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000062 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000063 940c 00ce 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;unsigned char hours = 23;
                 ;unsigned char minutes = 58;
                 ;unsigned char seconds = 0;
                 ;
                 ;int pointer;
                 ;unsigned char cathode_seg[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 
                 	.DSEG
                 ;
                 ;
                 ;void display(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _display:
                 ; .FSTART _display
                 ; 0000 000E unsigned char i;
                 ; 0000 000F for(i=0;i<100;i++)
000065 931a      	ST   -Y,R17
                 ;	i -> R17
000066 e010      	LDI  R17,LOW(0)
                 _0x5:
000067 3614      	CPI  R17,100
000068 f560      	BRSH _0x6
                 ; 0000 0010 {
                 ; 0000 0011 PORTC = cathode_seg[hours   / 10]  ;PORTD = 0b11111110;delay_us(100);PORTD = 0xff;
000069 2da5      	MOV  R26,R5
00006a d09b      	RCALL SUBOPT_0x0
00006b efee      	LDI  R30,LOW(254)
00006c d0a3      	RCALL SUBOPT_0x1
                 ; 0000 0012 PORTC = cathode_seg[hours   % 10]  ;PORTD = 0b11111101;delay_us(100);PORTD = 0xff;
00006d 2da5      	MOV  R26,R5
00006e d0a9      	RCALL SUBOPT_0x2
00006f efed      	LDI  R30,LOW(253)
000070 d09f      	RCALL SUBOPT_0x1
                 ; 0000 0013 PORTC = cathode_seg[minutes / 10]  ;PORTD = 0b11111011;delay_us(100);PORTD = 0xff;
000071 2da4      	MOV  R26,R4
000072 d093      	RCALL SUBOPT_0x0
000073 efeb      	LDI  R30,LOW(251)
000074 d09b      	RCALL SUBOPT_0x1
                 ; 0000 0014 PORTC = cathode_seg[minutes % 10]  ;PORTD = 0b11110111;delay_us(100);PORTD = 0xff;
000075 2da4      	MOV  R26,R4
000076 d0a1      	RCALL SUBOPT_0x2
000077 efe7      	LDI  R30,LOW(247)
000078 d097      	RCALL SUBOPT_0x1
                 ; 0000 0015 PORTC = cathode_seg[seconds / 10]  | pointer ;PORTD = 0b11101111;delay_us(100);PORTD = 0xff;
000079 2da7      	MOV  R26,R7
00007a e0b0      	LDI  R27,0
00007b e0ea      	LDI  R30,LOW(10)
00007c e0f0      	LDI  R31,HIGH(10)
00007d 940e 0139 	CALL __DIVW21
00007f 5ae0      	SUBI R30,LOW(-_cathode_seg)
000080 4ffd      	SBCI R31,HIGH(-_cathode_seg)
000081 81e0      	LD   R30,Z
000082 29e8      	OR   R30,R8
000083 bbe5      	OUT  0x15,R30
000084 eeef      	LDI  R30,LOW(239)
000085 d08a      	RCALL SUBOPT_0x1
                 ; 0000 0016 PORTC = cathode_seg[seconds % 10]  | pointer ;PORTD = 0b11011111;delay_us(100);PORTD = 0xff;
000086 2da7      	MOV  R26,R7
000087 27bb      	CLR  R27
000088 e0ea      	LDI  R30,LOW(10)
000089 e0f0      	LDI  R31,HIGH(10)
00008a 940e 013e 	CALL __MODW21
00008c 5ae0      	SUBI R30,LOW(-_cathode_seg)
00008d 4ffd      	SBCI R31,HIGH(-_cathode_seg)
00008e 81e0      	LD   R30,Z
00008f 29e8      	OR   R30,R8
000090 bbe5      	OUT  0x15,R30
000091 edef      	LDI  R30,LOW(223)
000092 d07d      	RCALL SUBOPT_0x1
                 ; 0000 0017 };
000093 5f1f      	SUBI R17,-1
000094 cfd2      	RJMP _0x5
                 _0x6:
                 ; 0000 0018 }
000095 9119      	LD   R17,Y+
000096 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 001F {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000097 920a      	ST   -Y,R0
000098 921a      	ST   -Y,R1
000099 939a      	ST   -Y,R25
00009a 93aa      	ST   -Y,R26
00009b 93ba      	ST   -Y,R27
00009c 93ea      	ST   -Y,R30
00009d 93fa      	ST   -Y,R31
00009e b7ef      	IN   R30,SREG
00009f 93ea      	ST   -Y,R30
                 ; 0000 0020 // Place your code here
                 ; 0000 0021 
                 ; 0000 0022  if(seconds%2==0)
0000a0 2da7      	MOV  R26,R7
0000a1 27bb      	CLR  R27
0000a2 e0e2      	LDI  R30,LOW(2)
0000a3 e0f0      	LDI  R31,HIGH(2)
0000a4 940e 013e 	CALL __MODW21
0000a6 9730      	SBIW R30,0
0000a7 f421      	BRNE _0x7
                 ; 0000 0023     {
                 ; 0000 0024      pointer = 0b10000000;
0000a8 e8e0      	LDI  R30,LOW(128)
0000a9 e0f0      	LDI  R31,HIGH(128)
0000aa 014f      	MOVW R8,R30
                 ; 0000 0025     }
                 ; 0000 0026     else
0000ab c002      	RJMP _0x8
                 _0x7:
                 ; 0000 0027     {
                 ; 0000 0028      pointer = 0b0000000;
0000ac 2488      	CLR  R8
0000ad 2499      	CLR  R9
                 ; 0000 0029     }
                 _0x8:
                 ; 0000 002A 
                 ; 0000 002B }
0000ae 91e9      	LD   R30,Y+
0000af bfef      	OUT  SREG,R30
0000b0 91f9      	LD   R31,Y+
0000b1 91e9      	LD   R30,Y+
0000b2 91b9      	LD   R27,Y+
0000b3 91a9      	LD   R26,Y+
0000b4 9199      	LD   R25,Y+
0000b5 9019      	LD   R1,Y+
0000b6 9009      	LD   R0,Y+
0000b7 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 002F {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000b8 93ea      	ST   -Y,R30
0000b9 b7ef      	IN   R30,SREG
0000ba 93ea      	ST   -Y,R30
                 ; 0000 0030 
                 ; 0000 0031 
                 ; 0000 0032     seconds++;
0000bb 9473      	INC  R7
                 ; 0000 0033 
                 ; 0000 0034 	if(seconds == 60)
0000bc e3ec      	LDI  R30,LOW(60)
0000bd 15e7      	CP   R30,R7
0000be f411      	BRNE _0x9
                 ; 0000 0035 	{
                 ; 0000 0036 		seconds = 0;
0000bf 2477      	CLR  R7
                 ; 0000 0037 		minutes++;
0000c0 9443      	INC  R4
                 ; 0000 0038 	}
                 ; 0000 0039 	if(minutes == 60)
                 _0x9:
0000c1 e3ec      	LDI  R30,LOW(60)
0000c2 15e4      	CP   R30,R4
0000c3 f411      	BRNE _0xA
                 ; 0000 003A 	{
                 ; 0000 003B 		minutes = 0;
0000c4 2444      	CLR  R4
                 ; 0000 003C 		hours++;
0000c5 9453      	INC  R5
                 ; 0000 003D 	}
                 ; 0000 003E 	if(hours > 23)
                 _0xA:
0000c6 e1e7      	LDI  R30,LOW(23)
0000c7 15e5      	CP   R30,R5
0000c8 f408      	BRSH _0xB
                 ; 0000 003F 		hours = 0;
0000c9 2455      	CLR  R5
                 ; 0000 0040 
                 ; 0000 0041 }
                 _0xB:
0000ca 91e9      	LD   R30,Y+
0000cb bfef      	OUT  SREG,R30
0000cc 91e9      	LD   R30,Y+
0000cd 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0044 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0045 // Declare your local variables here
                 ; 0000 0046 
                 ; 0000 0047 // Input/Output Ports initialization
                 ; 0000 0048 // Port A initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bbea      	OUT  0x1A,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000d0 bbeb      	OUT  0x1B,R30
                 ; 0000 004D 
                 ; 0000 004E // Port B initialization
                 ; 0000 004F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0050 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000d1 efef      	LDI  R30,LOW(255)
0000d2 bbe7      	OUT  0x17,R30
                 ; 0000 0051 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0052 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 bbe8      	OUT  0x18,R30
                 ; 0000 0053 
                 ; 0000 0054 // Port C initialization
                 ; 0000 0055 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0056 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000d5 efef      	LDI  R30,LOW(255)
0000d6 bbe4      	OUT  0x14,R30
                 ; 0000 0057 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0058 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bbe5      	OUT  0x15,R30
                 ; 0000 0059 
                 ; 0000 005A // Port D initialization
                 ; 0000 005B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005C DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000d9 efef      	LDI  R30,LOW(255)
0000da bbe1      	OUT  0x11,R30
                 ; 0000 005D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 005E PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
0000db bbe2      	OUT  0x12,R30
                 ; 0000 005F 
                 ; 0000 0060 // Timer/Counter 0 initialization
                 ; 0000 0061 // Clock source: System Clock
                 ; 0000 0062 // Clock value: 31.250 kHz
                 ; 0000 0063 // Mode: CTC top=OCR0
                 ; 0000 0064 // OC0 output: Toggle on compare match
                 ; 0000 0065 // Timer Period: 8.032 ms
                 ; 0000 0066 // Output Pulse(s):
                 ; 0000 0067 // OC0 Period: 16.064 ms Width: 8.032 ms
                 ; 0000 0068 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
0000dc e0ec      	LDI  R30,LOW(12)
0000dd bfe3      	OUT  0x33,R30
                 ; 0000 0069 TCNT0=0x00;
0000de e0e0      	LDI  R30,LOW(0)
0000df bfe2      	OUT  0x32,R30
                 ; 0000 006A OCR0=0xFA;
0000e0 efea      	LDI  R30,LOW(250)
0000e1 bfec      	OUT  0x3C,R30
                 ; 0000 006B 
                 ; 0000 006C // Timer/Counter 1 initialization
                 ; 0000 006D // Clock source: System Clock
                 ; 0000 006E // Clock value: 31.250 kHz
                 ; 0000 006F // Mode: CTC top=OCR1A
                 ; 0000 0070 // OC1A output: Toggle on compare match
                 ; 0000 0071 // OC1B output: Disconnected
                 ; 0000 0072 // Noise Canceler: Off
                 ; 0000 0073 // Input Capture on Falling Edge
                 ; 0000 0074 // Timer Period: 1 s
                 ; 0000 0075 // Output Pulse(s):
                 ; 0000 0076 // OC1A Period: 2.0001 s Width: 1 s
                 ; 0000 0077 // Timer1 Overflow Interrupt: Off
                 ; 0000 0078 // Input Capture Interrupt: Off
                 ; 0000 0079 // Compare A Match Interrupt: On
                 ; 0000 007A // Compare B Match Interrupt: Off
                 ; 0000 007B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 bdef      	OUT  0x2F,R30
                 ; 0000 007C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0000e4 e0ec      	LDI  R30,LOW(12)
0000e5 bdee      	OUT  0x2E,R30
                 ; 0000 007D TCNT1H=0x00;
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 bded      	OUT  0x2D,R30
                 ; 0000 007E TCNT1L=0x00;
0000e8 bdec      	OUT  0x2C,R30
                 ; 0000 007F ICR1H=0x00;
0000e9 bde7      	OUT  0x27,R30
                 ; 0000 0080 ICR1L=0x00;
0000ea bde6      	OUT  0x26,R30
                 ; 0000 0081 OCR1AH=0x12;
0000eb e1e2      	LDI  R30,LOW(18)
0000ec bdeb      	OUT  0x2B,R30
                 ; 0000 0082 OCR1AL=0xFF;
0000ed efef      	LDI  R30,LOW(255)
0000ee bdea      	OUT  0x2A,R30
                 ; 0000 0083 OCR1BH=0x00;
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 bde9      	OUT  0x29,R30
                 ; 0000 0084 OCR1BL=0x00;
0000f1 bde8      	OUT  0x28,R30
                 ; 0000 0085 
                 ; 0000 0086 // Timer/Counter 2 initialization
                 ; 0000 0087 // Clock source: System Clock
                 ; 0000 0088 // Clock value: Timer2 Stopped
                 ; 0000 0089 // Mode: Normal top=0xFF
                 ; 0000 008A // OC2 output: Disconnected
                 ; 0000 008B ASSR=0<<AS2;
0000f2 bde2      	OUT  0x22,R30
                 ; 0000 008C TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000f3 bde5      	OUT  0x25,R30
                 ; 0000 008D TCNT2=0x00;
0000f4 bde4      	OUT  0x24,R30
                 ; 0000 008E OCR2=0x00;
0000f5 bde3      	OUT  0x23,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0091 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000f6 e1e2      	LDI  R30,LOW(18)
0000f7 bfe9      	OUT  0x39,R30
                 ; 0000 0092 
                 ; 0000 0093 
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097 
                 ; 0000 0098 // Global enable interrupts
                 ; 0000 0099 #asm("sei")
0000f8 9478      	sei
                 ; 0000 009A 
                 ; 0000 009B 
                 ; 0000 009C 
                 ; 0000 009D while (1)
                 _0xC:
                 ; 0000 009E       {
                 ; 0000 009F       // Place your code here
                 ; 0000 00A0         PORTC=cathode_seg[2];
                +
0000f9 91e0 0262+LDS R30 , _cathode_seg + ( 2 )
                 	__GETB1MN _cathode_seg,2
0000fb bbe5      	OUT  0x15,R30
                 ; 0000 00A1         PORTD = ~0x01;;
0000fc efee      	LDI  R30,LOW(254)
0000fd bbe2      	OUT  0x12,R30
                 ; 0000 00A2         PORTC=cathode_seg[3];
                +
0000fe 91e0 0263+LDS R30 , _cathode_seg + ( 3 )
                 	__GETB1MN _cathode_seg,3
000100 bbe5      	OUT  0x15,R30
                 ; 0000 00A3         PORTD = ~0x02;
000101 efed      	LDI  R30,LOW(253)
000102 bbe2      	OUT  0x12,R30
                 ; 0000 00A4 
                 ; 0000 00A5         display();
000103 df61      	RCALL _display
                 ; 0000 00A6 
                 ; 0000 00A7 
                 ; 0000 00A8       }
000104 cff4      	RJMP _0xC
                 ; 0000 00A9 }
                 _0xF:
000105 cfff      	RJMP _0xF
                 ; .FEND
                 
                 	.DSEG
                 _cathode_seg:
000260           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000106 e0b0      	LDI  R27,0
000107 e0ea      	LDI  R30,LOW(10)
000108 e0f0      	LDI  R31,HIGH(10)
000109 940e 0139 	CALL __DIVW21
00010b 5ae0      	SUBI R30,LOW(-_cathode_seg)
00010c 4ffd      	SBCI R31,HIGH(-_cathode_seg)
00010d 81e0      	LD   R30,Z
00010e bbe5      	OUT  0x15,R30
00010f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x1:
000110 bbe2      	OUT  0x12,R30
                +
000111 ec88     +LDI R24 , LOW ( 200 )
000112 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000113 9701     +SBIW R24 , 1
000114 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000115 efef      	LDI  R30,LOW(255)
000116 bbe2      	OUT  0x12,R30
000117 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000118 27bb      	CLR  R27
000119 e0ea      	LDI  R30,LOW(10)
00011a e0f0      	LDI  R31,HIGH(10)
00011b 940e 013e 	CALL __MODW21
00011d 5ae0      	SUBI R30,LOW(-_cathode_seg)
00011e 4ffd      	SBCI R31,HIGH(-_cathode_seg)
00011f 81e0      	LD   R30,Z
000120 bbe5      	OUT  0x15,R30
000121 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000122 95f1      	NEG  R31
000123 95e1      	NEG  R30
000124 40f0      	SBCI R31,0
000125 9508      	RET
                 
                 __DIVW21U:
000126 2400      	CLR  R0
000127 2411      	CLR  R1
000128 e190      	LDI  R25,16
                 __DIVW21U1:
000129 0faa      	LSL  R26
00012a 1fbb      	ROL  R27
00012b 1c00      	ROL  R0
00012c 1c11      	ROL  R1
00012d 1a0e      	SUB  R0,R30
00012e 0a1f      	SBC  R1,R31
00012f f418      	BRCC __DIVW21U2
000130 0e0e      	ADD  R0,R30
000131 1e1f      	ADC  R1,R31
000132 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000133 60a1      	SBR  R26,1
                 __DIVW21U3:
000134 959a      	DEC  R25
000135 f799      	BRNE __DIVW21U1
000136 01fd      	MOVW R30,R26
000137 01d0      	MOVW R26,R0
000138 9508      	RET
                 
                 __DIVW21:
000139 d012      	RCALL __CHKSIGNW
00013a dfeb      	RCALL __DIVW21U
00013b f40e      	BRTC __DIVW211
00013c dfe5      	RCALL __ANEGW1
                 __DIVW211:
00013d 9508      	RET
                 
                 __MODW21:
00013e 94e8      	CLT
00013f ffb7      	SBRS R27,7
000140 c004      	RJMP __MODW211
000141 95a0      	COM  R26
000142 95b0      	COM  R27
000143 9611      	ADIW R26,1
000144 9468      	SET
                 __MODW211:
000145 fdf7      	SBRC R31,7
000146 dfdb      	RCALL __ANEGW1
000147 dfde      	RCALL __DIVW21U
000148 01fd      	MOVW R30,R26
000149 f40e      	BRTC __MODW212
00014a dfd7      	RCALL __ANEGW1
                 __MODW212:
00014b 9508      	RET
                 
                 __CHKSIGNW:
00014c 94e8      	CLT
00014d fff7      	SBRS R31,7
00014e c002      	RJMP __CHKSW1
00014f dfd2      	RCALL __ANEGW1
000150 9468      	SET
                 __CHKSW1:
000151 ffb7      	SBRS R27,7
000152 c006      	RJMP __CHKSW2
000153 95a0      	COM  R26
000154 95b0      	COM  R27
000155 9611      	ADIW R26,1
000156 f800      	BLD  R0,0
000157 9403      	INC  R0
000158 fa00      	BST  R0,0
                 __CHKSW2:
000159 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   0 r4 :   5 r5 :   5 r6 :   0 r7 :   6 
r8 :   4 r9 :   1 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   5 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   7 r26:  21 r27:  14 r28:   1 r29:   1 r30: 118 r31:  21 
x  :   3 y  :  22 z  :  11 
Registers used: 20 out of 35 (57.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   3 cpc   :   0 cpi   :   1 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  22 ld    :  15 ldd   :   0 ldi   :  58 
lds   :   2 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   7 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   0 out   :  44 pop   :   0 push  :   0 rcall :  18 ret   :   9 
reti  :   2 rjmp  :   9 rol   :   3 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  14 std   :   0 sts   :   0 sub   :   1 subi  :   5 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 47 out of 116 (40.5%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002b4    664     28    692   32768   2.1%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
